def compute_lps(string, n, lps, index):
    lenn = lps[index - 1]
    while index < n:
        if string[index] == string[lenn]:
            lenn += 1
            lps[index] = lenn
            index += 1
        else:
            if lenn > 0:
                lenn = lps[lenn - 1]
            else:
                lps[index] = 0
                index += 1
    return lps


def compute_next_shortest(x, y, lps, string):
    if x == y:
        return x
    else:
        c1 = lps[x - 1]
        c2 = lps[y - 1]
        while (c1 != c1 and c1 != 0 and c2 != 0):
            if c1 < c2:
                while c2 > 0:
                    c2 = lps[c2 - 1]
            else:
                while c1 > 0:
                    c1 = lps[c1 - 1]
        return min(c1, c2)


def no_of_substrings(l, r, p, string, lps):
    ctr = 0
    for i in range(l + p - 2, r):
        lenn = lps[i]
        while lenn > p:
            lenn = lps[lenn - 1]
        if lenn == p:
            ctr += 1
    return ctr


n = 100
q = 1

string = "bbcaacacaaaaaccbcaacccbabcbcaabbbcaaccccacaacbcaabccbacaaabccbccaabbbaacaabbacccbaababcccbbccbcbaccc"

lps = [0 for i in range(n)]
lps = compute_lps(string, n, lps, 1)
print(lps)

for i in range(q):
    query = "2 2 92"

    query = query.split(' ')

    if query[0] == '1':
        string += query[1]
        n += 1
        lps.append(0)
        lps = compute_lps(string, n, lps, n - 1)
        print(lps)

    elif query[0] == '2':
        x = int(query[1])
        y = int(query[2])
        print(compute_next_shortest(x, y, lps, string))

    elif query[0] == '3':
        p = int(query[1])
        l = int(query[2])
        r = int(query[3])
        print(no_of_substrings(l, r, p, string, lps))
